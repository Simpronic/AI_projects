# -*- coding: utf-8 -*-
"""TitanicExercise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13qWSD_zdG2dk9Ji8Z4xbUcHRmFz4m0QW
"""

#Titanic kaggle exercise

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import KFold, cross_val_score

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

train_dataset = pd.read_csv('train.csv')
test_dataset = pd.read_csv('test.csv')

X, y = train_dataset.drop('Survived', axis=1), train_dataset['Survived']

X = X.drop(['PassengerId', 'Name', 'Ticket', 'Cabin','Embarked'], axis=1)

X

"""Data preprocessing"""

stats = X.info()
print(stats)

mean_age = X['Age'].mean()
X['Age'].fillna(mean_age, inplace=True)

"""
Alternative at the previous code

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(missing_valuse=np.nan, strategy='mean')
X['Age'] = imputer.fit_transform(X[['Age']]
"""

stats = X.info()
print(stats)

le = LabelEncoder()
X['Sex'] = le.fit_transform(X['Sex'])

for column in X.columns:
    plt.figure(figsize=(6, 4))
    plt.scatter(X[column], y, alpha=0.7, c=y, cmap='coolwarm')
    plt.title(f'Scatter Plot: {column} vs Target')
    plt.xlabel(column)
    plt.ylabel('Target')
    plt.grid(True)
    plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

models = [LogisticRegression(),
          DecisionTreeClassifier(),
          RandomForestClassifier(),
          GradientBoostingClassifier(),
          AdaBoostClassifier(),
          SVC(),
          GaussianNB()]

for model in models:
    kfold = KFold(n_splits=2)
    cv_result = cross_val_score(model,X_train,y_train, cv = kfold,scoring = "accuracy")
    print(f"{model.__class__.__name__} Accuracy: {cv_result}")

rf_model = SVC()
param_grid = {
    'C': [0.1, 1, 10, 100],
    'kernel': ['linear', 'rbf', 'poly'],
    'gamma': ['scale', 'auto', 0.01, 0.1],
    'degree': [2, 3, 4]  # Solo rilevante per il kernel 'poly'
}
grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring='accuracy', n_jobs=-1)
grid_search.fit(X_train, y_train)

grid_search.best_params_

best_model = grid_search.best_estimator_

y_pred = best_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"{best_model.__class__.__name__} Accuracy: {accuracy}")

testset = pd.read_csv('test.csv')
x_test = testset.drop(['PassengerId', 'Name', 'Ticket', 'Cabin','Embarked'], axis=1)

x_test['Age'].fillna(x_test['Age'].mean(), inplace=True)
x_test['Fare'].fillna(x_test['Fare'].mean(), inplace=True)

x_test['Sex'] = le.fit_transform(x_test['Sex'])
x_test = scaler.transform(x_test)

y_pred = best_model.predict(x_test)
y_pred

df = pd.read_csv('test.csv')
submission = pd.DataFrame({'PassengerId': df['PassengerId'], 'Survived': y_pred})
submission.to_csv('submission.csv', index=False)